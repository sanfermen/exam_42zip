1 aff_a				cond ac == 2, iter wh, cond wr+(break), incre, else wr+"a",         
1 aff_z   			(void)ac/av+wr-z+\n+2

2 ft_putstr			v.ft(c.*s), iter wh+*s ; main - s1[] = "string";
2 ft_strlen       	i.ft(c.*s), iter wh+s[i] ; return (i)
2 rev_print 		int i, cond ac == 2, iter wh+s[1][i], iter wh[i] wr
                    prog: ac == 2 ; 1 while compter 'i' ; 1 while write --i ; ft()

3 fizbuzz           recurs / 15-3-5 % == 0
3 buzzfizz 			recurs / 28-4-7 % == 0

4 aff_first_param   ac > 1 	; wh+*av[1]+wr+av[1]++
4 aff_last_param    ac > 1 	; wh+*av[ac -1]+wr+av[ac -1]++

5 first_word 		ac == 2	; 1 while *av[1] == ascii -> av[1]++ ; 2 while *av[1] != ascii ; wr+av[1]++
5 rot_13          	int i	; ac == 2 ; wh av[1][i] if lowerC -> formule ; else if upperC -> formule ; wr &av[1][i] ; i++ 
5 rotone 			ac == 2 ; call rotone(av[1]) ; rotone(char *s) ; wh (*s) ; if-else-if-else+putchar(*s+1 ; *s-25 ; *s)

6 inter             m(ac,av) | ft_comp_chars(c.*s1, c.*s2) | while ascii[i++] à 0 | while (*s2) | while (*s1) + wr | rlis2
                    m(ac,av) | ft_inter(c.*str1, c.*str2) call ft_strchr(str2, str1[i], ft_strlen(str2)) | gpto1/  
                    le +court / rlis1
6 union             m(ac,av) | ft_union(c.*s1, c.*s2) | while ascii[] à 0 | while (*s1) + wr | while (*s2) + wr | gpto1
                                                                                                                  
6 last_word         m(ac,av) | last_word(c.*str) | while (str[i]) j = i + 1 | while (str[j] j++) | rlis

7 ft_itoa           
    int	ft_nbrlen(int n) 
        This is a function in C programming language called ft_nbrlen(), which returns
        the number of digits in an integer 'n'.
    char	*ft_strnew(size_t size)
        This is a function in C programming language called ft_strnew(), which creates
        a new string with a specified size and initializes all its characters to null.             
    char	*ft_strcpy(char *s1, char *s2)   
        This is a function in C programming language called ft_strcpy(), which copies
        a string 's2' to another string 's1'.
    char	*ft_itoa(int n)
        This is a function in C programming language called ft_itoa(), which converts
        an 'i'nteger in'to' a 'string'.

7 ft_range         
    int	len_arr(int min, int max)
        The len_arr() function takes two integer arguments 'min and max'. It calculates
        the length of the array that should be created by subtracting 'min from max'
        if max is greater than or equal to 'min', otherwise subtracting 'max from min'
        It returns the calculated length 'n'
    int	*ft_range(int min, int max)
        The ft_range() function takes two integer arguments 'min and max'. It first
        calls the len_arr() function to determine the length of the array to be created
        It then dynamically allocates memory for the array using malloc() function

7 ft_rrange 
    int	*ft_rrange(int start, int end)
        This code is a function named ft_rrange that takes in two integer arguments 
        'start and end', and returns an integer array pointer 'r'

8 expand_str   
    int	main(int ac, char const **av) 
        This is a C program that takes a string as input and prints it with all
        multiple consecutive spaces replaced by a 'three (3)' 'tab' character.
8 ft_split  
    int	    ft_wordlen(char *str) - calculates the length of a given word before whitespace (aka ' ', '\t', and '\n'.)
    char	*word_dupe(char *str) - duplicates a given word and returns a pointer to the duplicated string
    void	fill_words(char **array, char *str) - populates an array of strings with individual words (*str)
                                        extracted from an input string.
    int	    count_words(char *str) - takes a string as input and returns the number of words in that string
    char    **ft_split(char *str) - takes a string as input, splits it into individual words, and returns an
                                        array of strings
     
================================================
ft_liste_remove_if   sort_list                       1,2
count_islands        infin_mult      g_diam          1,2,3
                                                    exam-42-zip.png 
================================================

If the number of arguments is less than 1 ... ac > 1
If the number of arguments is not 1 ......... ac == 2
If the number of arguments is not 2 ......... ac == 3
peut aider !
http://nigal.freeshell.org/42/

NESO Academy (C programming, et bcp +)
https://www.youtube.com/playlist?list=PLBlnK6fEyqRhX6r2uhhlubuF5QextdCSM
